import subprocess
import json
import tempfile
import os

def scan_sbom_with_grype(sbom_data, file_path):
    # Create temporary SBOM file for Grype
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as temp_file:
        json.dump(sbom_data, temp_file)
        temp_file_path = temp_file.name
    
    try:
        # Run Grype scan
        result = subprocess.run([
            'grype', temp_file_path, '--output', 'json'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            vulnerabilities = json.loads(result.stdout)
            return process_vulnerabilities(vulnerabilities)
        else:
            raise Exception(f"Grype scan failed: {result.stderr}")
    
    finally:
        os.unlink(temp_file_path)

def process_vulnerabilities(grype_output):
    vulnerabilities = []
    
    for match in grype_output.get('matches', []):
        vuln = match.get('vulnerability', {})
        artifact = match.get('artifact', {})
        
        vulnerability = {
            'cve_id': vuln.get('id', ''),
            'severity': vuln.get('severity', 'Unknown'),
            'description': vuln.get('description', ''),
            'cvss_score': vuln.get('cvss', [{}])[0].get('metrics', {}).get('baseScore', 0),
            'fixed_versions': vuln.get('fix', {}).get('versions', []),
            'component_name': artifact.get('name', ''),
            'component_version': artifact.get('version', ''),
            'package_url': artifact.get('purl', ''),
            'vex_status': 'Under Investigation'  # Default status
        }
        vulnerabilities.append(vulnerability)
    
    return vulnerabilities
